let botSums = 0; //variabel yg mewakili jumlah poin bot
let mySums = 0; //variabel yg mewakili jumlah poin dari gue sendiri

let botASCards = 0; // variabel yang mungkin digunakan untuk melacak jumlah kartu tertentu.
let myASCards = 0; // (dalam hal ini kartu As) yang dimiliki oleh bot dan pemain.


let cards; // variabel yang mungkin digunakan untuk menyimpan kumpulan kartu atau array kartu yang digunakan dalam permainan
let isCanHit = true; //variabel boolean yang mungkin digunakan untuk mengontrol apakah pemain atau bot dapat "memukul" atau "menambah" kartu dalam permainan


const startGameButton = document.getElementById("btn-start-game"); //tombol yang digunakan untuk memulai permainan
const takeCardButton = document.getElementById("btn-take"); //memungkinkan pemain mengambil kartu tambahan dalam permainan.
const holdCardsButton = document.getElementById("btn-hold");//memungkinkan pemain untuk "mengunci" kartu-kartu yang mereka miliki dalam permainan

const mySumsElement = document.getElementsByClassName("my-sums")[0]; //digunakan untuk mengakses atau memanipulasi elemen yang mewakili jumlah poin atau total poin pemain.
const myCardsElement = document.getElementsByClassName("my-cards")[0];//digunakan untuk mengakses atau memanipulasi elemen yang mewakili kartu-kartu yang dimiliki pemain.
const myMoney = document.getElementById("my-money"); //digunakan untuk mengakses atau memanipulasi elemen yang mewakili jumlah uang yang dimiliki pemain.
const inputMoney = document.getElementsByTagName("input")[0]; //digunakan untuk mengakses atau memanipulasi elemen input dalam halaman web.

const botSumsElement = document.getElementsByClassName("bot-sums")[0];//digunakan untuk mengakses atau memanipulasi elemen yang mewakili jumlah poin atau total poin yang dimiliki oleh bot (komputer atau lawan dalam permainan).
const botCardsElement = document.getElementsByClassName("bot-cards")[0];//digunakan untuk mengakses atau memanipulasi elemen yang mewakili kartu-kartu yang dimiliki oleh bot (komputer atau lawan dalam permainan).

const resultElement = document.getElementById("result"); //digunakan untuk mengakses atau memanipulasi elemen HTML yang memiliki ID "result" dalam halaman web.

function redirectToGamePage() {
    window.location.href = "index.html";
} //mengarahkan pengguna dari satu halaman web ke halaman web lain

window.onload = function () { //fungsi yang akan dieksekusi pada saat halaman web terbuka/dimuat sepenuhnya
  buildUserCards();  //menampilkan kartu pemain
  shuffleCards();  //untuk mengacak kartu
  takeCardButton.setAttribute("disabled", true); //tombol take a card di nonaktifkan pada saat masuk ke page utama
  holdCardsButton.setAttribute("disabled", true); 
};

function buildUserCards() { 
  let cardTypes = ["H", "B", "S", "K"]; //mendefinisikan sebuah array dengan nama cardTypes yang berisi jenis kartu.
  let cardValues = [ //mendefinisikan sebuah array dengan nama cardValues yang berisi nilai-nilai yang mungkin untuk setiap jenis kartu
    "A",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "J",
    "Q",
    "K",
  ];
  cards = []; //mendeklarasikan variabel cards sebagai array kosong. Ini akan digunakan untuk menyimpan kumpulan kartu yang dibangun.

   //perulangan yg dilakukan utk menggabungkan jenis kartu dan nilai kartu menjadi kartu tunggal
    for (let i = 0; i < cardTypes.length; i++) {  //loop u/ jeniskartu
        for (let j = 0; j < cardValues.length; j++) { //loop u/ nilaikartu
        cards.push(cardValues[j] + "-" + cardTypes[i]); //kartu yang dibentuk dari jenis dan nilai digabungkan menggunakan tanda "-" dan ditambahkan ke dalam array cards.
        // console.log(cards);
        }
    }
}

function shuffleCards() { 
  for (let i = 0; i < cards.length; i++) {
    let randomNum = Math.floor(Math.random() * cards.length);  //angka acak(menghasilkan desimal) dikali dengan panjang kartu kemudian nnti dibulatkan pakai math floor
    let temp = cards[i]; //smtra sblm ditukar (indeks acak)
    cards[i] = cards[randomNum]; //Nilai kartu di indeks ke-i digantikan dengan nilai kartu yang terpilih secara acak 
    cards[randomNum] = temp; //krtu yg suda di acak kmudian brubah mnjdi krtu yg i
  }
}

startGameButton.addEventListener("click", function () {
  if (startGameButton.textContent === "TRY AGAIN") {  //kalau se klik ini bro tagganti start jd nt
    botSums = 0; 
    mySums = 0;
    botASCards = 0;
    myASCards = 0;
    isCanHit = true;

    botSumsElement.textContent = '';

    //berisi semua elemen gambar dalam dokumen.
    const allCardsImage = document.querySelectorAll("img"); //apabila terdapat kartu yang sama,hny salah satu yang diambil dan yg lain di hapus
    for (let i = 0; i < allCardsImage.length; i++) {
      allCardsImage[i].remove(); //tanyakan!!!!
    } //semua image(card) kalau selesaimi di jumlah trus klik try again nanti semua kartu yg muncul bakal terhapus dan muncul kartu baru

    let cardImg = document.createElement("img");  
    cardImg.src = "/images/cards/kartutertutup.png";
    cardImg.className = "hidden-card";
    botCardsElement.append(cardImg); //menampilkan gambar kartu tertutup 

    buildUserCards(); 
    shuffleCards();
  }

  takeCardButton.disabled = false; 
  holdCardsButton.disabled = false;
  startGameButton.textContent = "TRY AGAIN"; //mengganti teks pada tombol "startGameButton" menjadi "TRY AGAIN".
  botSums = 0;
  //startGameButton.setAttribute("disabled", true); 
  startGameButton.disabled = true;


  
  for (let i = 0; i < 2; i++) { //berjalan dua kali karena batasan kondisi i < 2, sehingga seluruh blok kode di dalamnya akan dijalankan dua kali.
    let cardImg = document.createElement("img"); 
    let card = cards.pop(); //mengasumsikan bahwa setiap pemain mendapatkan dua kartu di awal permainan.cards akan mengambil dan menghapus elemen trkhir dan hasilnya akan terdapat 2 kartu yang nantiny disimpan var card 
    cardImg.src = `/images/cards/${card}.png`; //menampilkan gambar kartu yang sesuai
    mySums += getValueOfCard(card); // menghitung nilai numerik yang sesuai dengan kartu yang diberikan.
    myASCards += checkASCard(card); //cek kartu as
    mySumsElement.textContent = mySums; 
    myCardsElement.append(cardImg); 
//apapun d dalam for semua bakal tereksekusi sesuai dgn isi perulangan yg tentukan
  }
});

takeCardButton.addEventListener("click", function () {
  if (!isCanHit) return; 

  let cardImg = document.createElement("img"); 
  let card = cards.pop(); 
  cardImg.src = `/images/cards/${card}.png`;
  mySums += getValueOfCard(card); 
  myASCards += checkASCard(card);
  mySumsElement.textContent = mySums;
  myCardsElement.append(cardImg);

  if (reduceASCardValue(mySums, myASCards) > 21) isCanHit = false; //kalau jumlah kartu besar dari 21 nd bsa mki tambah kartu

  if (mySums > 21) { 
    takeCardButton.disabled = true; 
    holdCardsButton.disabled = true;
    startGameButton.disabled = false; 
    resultElement.textContent = "NICE TRY"; 
    myMoney.textContent -= inputMoney.value; 
  }
});



holdCardsButton.addEventListener("click", function () {
  setTimeout(function () {
    document.getElementsByClassName("hidden-card")[0].remove();
  } , 1000); //jeda terbuka kartu bot apabila di hold

  function addBotCards() {
    setTimeout(function () { 
      let cardImg = document.createElement("img"); 
      let card = cards.pop();
      cardImg.src = `/images/cards/${card}.png`; 
      botSums += getValueOfCard(card);
      botASCards += checkASCard(card); 
      botCardsElement.append(cardImg); 
      botSumsElement.textContent = botSums; 

      
      if (botSums < 21) { 
        addBotCards();
      } else { 
        botSums = reduceASCardValue(botSums, botASCards); 
        mySums = reduceASCardValue(mySums, myASCards); //utk menampilkan jumlah akhir bot dan gue
        isCanHit = false; //tidak bsa mki tambah

        let message = "";
        if (mySums > 21 ) {  
          message = "NICE TRY";
          myMoney.textContent -= inputMoney.value; //titik permasalahan
        } else if (botSums < 21 || mySums % 22 > botSums % 22) {
          message = "WINNER BRO"; // k
          myMoney.textContent = parseInt(myMoney.textContent) + inputMoney.value * 5 ;
        } else if (mySums === botSums) message = "SERI";

        resultElement.textContent = message;
        startGameButton.disabled = false;
        takeCardButton.disabled = true;
        holdCardsButton.disabled = true;
      }
    }, 1000);
  }

  addBotCards();
});

function getValueOfCard(card) {
  let cardDetail = card.split("-"); //membagi string card menjadi dua bagian dengan memisahkan string berdasarkan tanda "-" menggunakan split("-"). Hasilnya adalah array cardDetail, di mana elemen pertama adalah nilai kartu (seperti "A" atau "7") dan elemen kedua adalah jenis kartu (seperti "Hearts" atau "Diamonds").
  let value = cardDetail[0]; //mengambil nilai kartu (elemen pertama dari array) dan menyimpannya dalam variabel value.

  // if (isNaN(value)) { 
  //   // Kartu AS
  //   if (value == "A") return 11;
  //   // Kartu K, Q, J
  //   else return 10;
  // }
  if (isNaN(value)) {
        if (value == "A") {
            if (mySums >= 11 || botSums >= 11) {
                return 1
            } else if (mySums < 11 || botSums < 11) {
                return 11;
            }
        }
        return 10;
    }

  return parseInt(value);
}

function checkASCard(card) {
  if (card[0] == "A") return 1;
  else return 0;
}

function reduceASCardValue(sums, asCards) {
  while (sums > 21 && asCards > 0) {
    sums -= 10;
    asCards -= 1;
  }
  return sums;
}
